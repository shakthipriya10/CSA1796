rom collections import defaultdict

class Graph:
    def _init_(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def dfs(self, start, visited):
        visited[start] = True
        print(start, end=' ')

        for neighbor in self.graph[start]:
            if not visited[neighbor]:
                self.dfs(neighbor, visited)

if _name_ == "_main_":
    g = Graph()
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 2)
    g.add_edge(2, 0)
    g.add_edge(2, 3)
    g.add_edge(3, 3)

    print("Depth-First Search (starting from vertex 1):")
    visited = [False] * (max(g.graph) + 1)
    g.dfs(1,Â visited)
